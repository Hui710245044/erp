
<template>
    <page class="p-index">
        <search
            ref="search"
            :searchData="searchData"
            @select-status="select_status"
            @search="search"
            @clear="clear"
            :audit="audit"
            @audit="auditSelect">
        </search>
        <el-row class="mt-sm">
            <permission tag="request-button"
                        :route="apis.url_post_virtual_finance_purchase_push_yks"
                        class="inline ml-sm"
                        :mintime="200"
                        :disabled="selectList.length === 0"
                        req-key="url_post_virtual_finance_purchase_push_yks"
                        @click="push_yks">推送给有棵树
            </permission>
            <permission tag="trendsSelect"
                        class="inline ml-sm mr-xs"
                        type="primary"
                        :selects="partAllOptions"
                        :route="apis.url_get_virtual_export"
                        req-key="url_get_virtual_export"
                        @trigger="export_sku">
            </permission>
        </el-row>
        <table-list :loading="loading"
                    class="mt-sm"
                    :tableData="tableData"
                    :first-loading="firstLoading"
                    @selection-change="selectionChange"
                    @search="search">
        </table-list>
        <export-field  v-model="exportVisable" :fields="fields"
                       :templates="templates"
                       :param="export_model_type"
                       title="请选择自定义导出字段"
                       :creat-excel="creat_excel"
                       @getTemplate="get_templates">
        </export-field>
        <el-pagination
            class="page-fixed"
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
            :current-page="searchData.page"
            :page-sizes="[20, 50, 100, 200,500]"
            :page-size="searchData.pageSize"
            layout="total, sizes, prev, pager, next, jumper"
            :total="total">
        </el-pagination>
    </page>
</template>
<style lang="stylus">
    .p-index{
        .el-dropdown .el-button-group {
            display: inline-block;
            position: relative;
            top: -1px;
        }
        .el-message-box__status{
            top:27% !important;
        }
        .btn{
            margin:5px  0;
            border :0;
        }
    }
</style>
<script>
    import {
        api_publish_edit_pay,api_virtual_status,
        url_post_virtual_finance_purchase_push_yks,
        api_post_virtual_finance_purchase_push_yks,
        api_get_virtual_export,
        url_get_virtual_export,
        api_get_virtual_export_field,
    } from "../../../api/purchase";
    import {url_get_balance}from '../../../api/assert-sup';
    import {
        url_finance_list,
        url_publish_edit_user,
    } from "../../../api/Payment";
    import {api_goods_export_template} from "../../../api/product-library";
    import {downloadFile} from '../../../lib/http';

    export default{
        permission:{
            url_get_virtual_export,
            url_finance_list,
            url_publish_edit_user,
            url_get_balance,
            url_post_virtual_finance_purchase_push_yks
        },
        page:{
            devinfo:{
                frontEnd:'熊辉',
                backEnd:'黄伟杰',
                createTime:'2017-9-22',
                updateTime:'2017-9-25'
            },
            beforeClose(){
                return true;
            }
        },
        refresh(){
            this.init();
        },
        data(){
            return{
                templates:[],
                ids:[],
                fields:[],
                exportVisable:false,
                export_type:'',
                partAllOptions: [
                    {name: "部分导出", value: 2},
                    {name: "全部导出", value: 1}
                ],
                export_model_type:{
                    type:11
                },
                audit:[],
                firstLoading:true,
                loading:false,
                total:0,
                selectList:[],
                tableData:[],
                searchData:{
                    page:1,
                    pageSize:50,
                    status:'',
                    order_type:"0",
                    order_number:"",
                    order_status: '',
                    time_status:'',
                    date_b:"",
                    date_e:"",
                    supplier_id:"",
                    time_status:"0",
                    warehouse_id:"",
                    balance_type:"",
                    payment_status:'',
                    purchase_order_id:"",
                    review_status:''
                },
            }
        },
        mounted(){
            this.get_status();
            this.init();
            this.get_fields();
        },
        methods:{
            get_fields() {
                this.$http(api_get_virtual_export_field).then(res => {
                    this.fields=res
                }).catch(code => {
                    this.$message({type: "error", message: code.message || code})
                });
            },
            order_export(params, head) {
                return this.$http(api_get_virtual_export, params, head).then(res => {
                    if (res.join_queue === 1) {
                        this.export_visible = true;
                        this.$message({type: "success", message: res.message || res});
                    } else {
                        let url = config.apiHost + 'downloadFile/downExportFile';
                        let params = {
                            file_code: res.file_code,
                            page: this.searchData.page,
                            pageSize: this.searchData.pageSize,
                        };
                        downloadFile({
                            url: url,
                            get: params,
                            fileName: res.file_name,
                            suffix: '.xls',
                        });
                        this.$message({type: "success", message: '导出成功' || res});
                    }
                }).catch(code => {
                    this.$message({type: "error", message: code.message || code});
                });
                return Promise.resolve()
            },
            get_templates() {
                this.$http(api_goods_export_template, {type: 11}).then(res => {
                    res.forEach(row => {
                        row.value = row.name;
                    });
                    this.templates = res;
                }).catch(code => {
                    this.$message({type: "error", message: code.message || code})
                });
            },
            creat_excel(param,list) {
                let fields = param.field.join(',');
                let data = '';
                switch (this.export_type) {
                    case 2://部分
                        let reqData = [];
                        let ids = [];
                        this.selectList.forEach(row=>{
                            ids.push(`${row.virtual_order_id}`)
                        });
                        list.forEach(row=>{
                            reqData.push({field_name:row.show_field,field_key:row.field})
                        });
                        let obj={
                            export_type : this.export_type,
                            fields:reqData,
                            ids:ids,
                        };
                        Object.assign(obj,this.init_params());
                        return this.order_export(obj, {
                            'X-Result-Fields': fields,
                            contentType: 'application/x-www-form-urlencoded'
                        });
                        break;
                    case 1://全部
                        let allData = [];
                        list.forEach(row=>{
                            allData.push({field_name:row.show_field,field_key:row.field})
                        });
                        let req={
                            export_type : this.export_type,
                            fields:allData,
                            order_status:this.searchData.order_status,
                            time_status:this.searchData.time_status,
                            date_b:this.searchData.date_b,
                            date_e:this.searchData.date_e,


                        };
                        return this.order_export(req, {
                            'X-Result-Fields': fields,
                            contentType: 'application/x-www-form-urlencoded'
                        });
                        break;
                }
            },
            export_sku(val) {
                if (val.value === 2 && this.selectList.length <= 0) {
                    this.$message({
                        type: "warning",
                        message: "请先选择需要导出的数据"
                    });
                }else {
                    this.export_type = val.value;
                    this.exportVisable = true;
                }
            },
            get_status(){
                this.$http(api_virtual_status).then(res=>{
                    this.audit = [{label:'全部',value:''},...res];
                });
            },
            init_params(){
                let paramsData = window.clone(this.searchData);
                if(this.searchData.date_b){
                    let d = new Date(this.searchData.date_b);
                    paramsData.date_b = d.getFullYear() + '-' + (d.getMonth() + 1) + '-' + d.getDate();
                }else {
                    paramsData.date_b='';
                }
                if(this.searchData.date_e){
                    let e = new Date(this.searchData.date_e);
                    paramsData.date_e = e.getFullYear() + '-' + (e.getMonth() + 1) + '-' + e.getDate();
                }else {
                    paramsData.date_e='';
                }
                if(this.searchData.order_number.trim()){
                    paramsData.order_number = this.searchData.order_number.replace(new RegExp(' ', 'gm'), '\n').trim().split('\n').map(row => row.trim()).filter(row => row !== '');
                }else{
                    paramsData.order_number = '';
                }
                return paramsData
            },
            //页面初始化请求列表数据
            init(){
                let parm = this.init_params();
                this.tableData=[];
                this.loading=true;
                this.$http(api_publish_edit_pay,parm).then(res=>{
                    this.total=res.count;
                    this.tableData=res.data;
                    this.loading = false;
                    this.firstLoading = false
                }).catch(code=>{
                    this.$message({
                        type:'error',
                        message:code.message || code
                    })
                })
            },
            select_status(val){
                this.searchData.payment_status=val;
                this.init();
            },
            auditSelect(val){
              this.searchData.review_status = val;
              this.init();
            },
            //点击搜索按钮  搜索
            search(){
                this.init();
            },
            //清空
            clear(){
                Object.keys(this.searchData).forEach(key=>{
                    this.searchData[key] = '';
                });
                this.searchData={
                    page:1,
                    pageSize:50,
                    snType:"purchase_order_code",
                    dateType:"purchase_time",
                };
                this.init();
            },
            //更改页面条数
            handleSizeChange(val) {
                this.searchData.pageSize=val;
                this.init();
            },
            //跳转页数
            handleCurrentChange(val) {
                this.searchData.page=val;
                this.init();
            },
            //选中
            selectionChange(val){
                this.selectList=val;
            },
            refresh(){
                this.init();
            },
            push_yks() {
                this.$confirm(`您将已勾选的虚拟采购单推送给有棵树，确定进行此操作?`, '提示', {
                    confirmButtonText: "确定",
                    cancelButtonText: "取消",
                    type: "warning"
                }).then(() => {
                    this.$http(api_post_virtual_finance_purchase_push_yks, {ids: JSON.stringify(this.selectList.map(row => row.virtual_finance_purchase_id))}).then(res => {
                        this.$message({type: 'success', message: res.message || res});
                        this.init();
                    }).catch(code => {
                        this.$message({type: 'error', message: code.message || code});
                    }).finally(() => {
                        setTimeout(() => {
                            this.$reqKey('url_post_virtual_finance_purchase_push_yks', false);
                        }, 200);
                    })
                }).catch(() => {
                    this.$message({
                        type: "info",
                        message: "已取消"
                    })
                }).finally(() => {
                    setTimeout(() => {
                        this.$reqKey('url_post_virtual_finance_purchase_push_yks', false);
                    }, 200);
                });
            }
        },
        components:{
            search:require('./search').default,
            tableList:require('./table-list').default,
            trendsSelect:require('../../../components/trends-select').default,
            exportField: require("@/components/export-field").default,
        }
    }
</script>
